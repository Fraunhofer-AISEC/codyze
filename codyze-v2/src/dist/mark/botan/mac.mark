package botan

entity Botan.MAC {
	var algorithm;
	var key: Botan.SymmetricKey;
	var data;
	var nonce;
	var nonce_len;
	var mac_output;
	var comparable;
	
	/* Note: there is also the possibility to create a MAC from ECIES_System_Params. Maybe forbid that? */
	
	op create {
		Botan::MessageAuthenticationCode::create(algorithm);
		Botan::MessageAuthenticationCode::create(algorithm, _);
		Botan::MessageAuthenticationCode::create_or_throw(algorithm);
		Botan::MessageAuthenticationCode::create_or_throw(algorithm, _);
	}
	
	op init {
		Botan::MessageAuthenticationCode::set_key(key);
	}
	
	op start {
		Botan::MessageAuthenticationCode::start();
		Botan::MessageAuthenticationCode::start(nonce);
		Botan::MessageAuthenticationCode::start(nonce, nonce_len);
		Botan::MessageAuthenticationCode::start_msg(nonce, nonce_len);
	}
	
	op update {
		Botan::MessageAuthenticationCode::update(data);
		Botan::MessageAuthenticationCode::update(data: uint8_t[], length);
		Botan::MessageAuthenticationCode::update_be(data);
	}

	op finalize {
		mac_output = Botan::MessageAuthenticationCode::final();
		mac_output = Botan::MessageAuthenticationCode::final_stdvec();
		Botan::MessageAuthenticationCode::final(mac_output);
	}
	
	op process {
		mac_output = Botan::MessageAuthenticationCode::process(data);
		mac_output = Botan::MessageAuthenticationCode::process(data: uint8_t[], length);
	}
	
	op verify {
		// From Botan Handbook: "Finalize the current MAC computation and compare the result to the passed mac. Returns true, if the verification is successful and false otherwise."
		Botan::MessageAuthenticationCode::verify_mac(comparable);
		forbidden Botan::MessageAuthenticationCode::verify_mac(_,_);  //forbid because it is safer to use vectors with included length information
	}
}


rule MACOrder {
	using Botan.MAC as m
	ensure order 
		m.create(), 
		m.init(), 
		m.start(), 
		(
			(m.update()*, 
				(
					m.finalize()
					| m.verify()
				)
			)
			| m.process()
		)
	onfail MACOrder
} 