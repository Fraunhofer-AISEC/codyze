package botan

/* 
 * From Botan Handbook:
 * "None of the functions on Public_Key and Private_Key itself are particularly useful for users of the library,
because ‘bare’ public key operations are very insecure. The only purpose of these functions is to provide a clean
interface that higher level operations can be built on. So really the only thing you need to know is that when a function
takes a reference to a Public_Key, it can take any public key or private key, and similiarly for Private_Key."
* 
* Note: maybe forbid these ops?
 */


entity Botan.Public_Key {
	var rng: Botan.RNG;
	var rsa_bits;
	var dl_group: Botan.DL_Group;
	var ec_group: Botan.EC_Group;
	var key_source;
	var password;
	
	op create {
		Botan::RSA_PublicKey(rng, rsa_bits);
		
		Botan::DSA_PublicKey(rng, dl_group);
		Botan::DH_PublicKey(rng, dl_group);
		Botan::ElGamal_PublicKey(rng, dl_group);
		
		Botan::ECDSA_PublicKey(rng, ec_group);
		Botan::ECKCDSA_PublicKey(rng, ec_group);
		Botan::ECGDSA_PublicKey(rng, ec_group);
		Botan::ECDH_PublicKey(rng, ec_group);
		Botan::GOST_3410_PublicKey(rng, ec_group);
		
		
		/* 
		 * From Botan Handbook: The optional x parameter to each of these constructors is a private key value. This allows you to create keys
			where the private key is formed by some special technique; for instance you can use the hash of a password (see
			PBKDF Algorithms for how to do that) as a private key value. Normally, you would leave the value as zero,
			letting the class generate a new random key. 
		 * NOTE: We do not see a safe use case for x here - Forbid it for now
		*/
		
		forbidden Botan::DSA_PublicKey(rng, dl_group, _);
		forbidden Botan::DH_PublicKey(rng, dl_group, _);
		forbidden Botan::ElGamal_PublicKey(rng, dl_group, _);
		forbidden Botan::ECDSA_PublicKey(rng, ec_group, _);
		forbidden Botan::ECKCDSA_PublicKey(rng, ec_group, _);
		forbidden Botan::ECGDSA_PublicKey(rng, ec_group, _);
		forbidden Botan::ECDH_PublicKey(rng, ec_group, _);
		forbidden Botan::GOST_3410_PublicKey(rng, ec_group, _);
	}
	
	op load {
		// NOTE: there is another function 'Botan::PKCS8::load_key(key_source, get_pass_function: std::function< std::string()>);' but MARK cannot parse the template parameter function
		Botan::PKCS8::load_key(key_source, password: std::string);
		Botan::PKCS8::load_key(key_source);
		
		// NOTE: there is another function 'Botan::PKCS8::load_key(key_source, _, get_pass_function: std::function< std::string()>);' but MARK cannot parse the template parameter function 
		Botan::PKCS8::load_key(key_source, _, password: std::string); // Ignored parameter is an rng (see botan docs: "rng	ignored for compatability)"
		Botan::PKCS8::load_key(key_source, _); // Ignored parameter is an rng (see botan docs: "rng	ignored for compatability)";
	}
	
	op check_key {
		Botan::RSA_PublicKey::check_key();
		
		Botan::DSA_PublicKey::check_key();
		Botan::DH_PublicKey::check_key();
		Botan::ElGamal_PublicKey::check_key();
		
		Botan::ECDSA_PublicKey::check_key();
		Botan::ECKCDSA_PublicKey::check_key();
		Botan::ECGDSA_PublicKey::check_key();
		Botan::ECDH_PublicKey::check_key();
		Botan::GOST_3410_PublicKey::check_key();
	}
	
	//Note maybe model Botan::PKCS8::BER_encode and Botan::PKCS8::PEM_encode if needed
}


/*
 * From Botan's Handbook:
	As key checks are not automatically performed they must be called manually after loading keys from untrusted sources.
	If a key from an untrusted source is not checked, the implementation might be vulnerable to algorithm specific attacks. 
 * 
 */
rule PubKeyOrder {
	using Botan.Public_Key as pk
	ensure order
		pk.create() 
		| (pk.load(), pk.check_key())
	onfail PubKeyOrder
}


/* Note: there are other Priv/Pub Key classes. Check the Botan class hierarchy
 * Do we want to model / whitelist them? - Intuition: No. They are not mentioned in Botan's Handbook
 * e.g. Botan::EC_PrivateKey, Botan::Ed25519_PrivateKey, Botan::DL_Scheme_PrivateKey
 */

 
 