package java.bcjca

rule BouncyCastleProvider_AlgorithmParameterGenerator {
    using
        AlgorithmParameterGenerator as apg
    ensure 
        _has_value(apg.provider)
        && (
            apg.provider == "BC"
            || _is_instance(apg.provider, "org.bouncycastle.jce.provider.BouncyCastleProvider")
        )
    onfail
        InvalidProvider_AlgorithmParameterGenerator
}

rule BouncyCastleProvider_AlgorithmParameters {
    using
        AlgorithmParameters as ap
    ensure 
        _has_value(ap.provider)
        && (
            ap.provider == "BC"
            || _is_instance(ap.provider, "org.bouncycastle.jce.provider.BouncyCastleProvider")
        )
    onfail
        InvalidProvider_AlgorithmParameters
}

rule BouncyCastleProvider_CertificateFactory {
    using
        CertificateFactory as cf
    ensure 
        _has_value(cf.provider)
        && (
            cf.provider == "BC"
            || _is_instance(cf.provider, "org.bouncycastle.jce.provider.BouncyCastleProvider")
        )
    onfail
        InvalidProvider_CertificateFactory
}

rule BouncyCastleProvider_CertPathBuilder {
    using
        CertPathBuilder as cpb
    ensure 
        _has_value(cpb.provider)
        && (
            cpb.provider == "BC"
            || _is_instance(cpb.provider, "org.bouncycastle.jce.provider.BouncyCastleProvider")
        )
    onfail
        InvalidProvider_CertPathBuilder
}

rule BouncyCastleProvider_CertPathValidator {
    using
        CertPathValidator as cpv
    ensure 
        _has_value(cpv.provider)
        && (
            cpv.provider == "BC"
            || _is_instance(cpv.provider, "org.bouncycastle.jce.provider.BouncyCastleProvider")
        )
    onfail
        InvalidProvider_CertPathValidator
}

rule BouncyCastleProvider_CertStore {
    using
        CertStore as cs
    ensure 
        _has_value(cs.provider)
        && (
            cs.provider == "BC"
            || _is_instance(cs.provider, "org.bouncycastle.jce.provider.BouncyCastleProvider")
        )
    onfail
        InvalidProvider_CertStore
}

rule BouncyCastleProvider_Cipher {
    using
        Cipher as c
    ensure 
        _has_value(c.provider)
        && (
            c.provider == "BC"
            || _is_instance(c.provider, "org.bouncycastle.jce.provider.BouncyCastleProvider")
        )
    onfail
        InvalidProvider_Cipher
}

rule BouncyCastleProvider_KeyAgreement {
    using
        KeyAgreement as ka
    ensure 
        _has_value(ka.provider)
        && (
            ka.provider == "BC"
            || _is_instance(ka.provider, "org.bouncycastle.jce.provider.BouncyCastleProvider")
        )
    onfail
        InvalidProvider_KeyAgreement
}


rule BouncyCastleProvider_KeyFactory {
    using
        KeyFactory as kf
    ensure 
        _has_value(kf.provider)
        && (
            kf.provider == "BC"
            || _is_instance(kf.provider, "org.bouncycastle.jce.provider.BouncyCastleProvider")
        )
    onfail
        InvalidProvider_KeyFactory
}

rule BouncyCastleProvider_KeyGenerator {
    using
        KeyGenerator as kg
    ensure 
        _has_value(kg.provider)
        && (
            kg.provider == "BC"
            || _is_instance(kg.provider, "org.bouncycastle.jce.provider.BouncyCastleProvider")
        )
    onfail
        InvalidProvider_KeyGenerator
}

rule BouncyCastleProvider_KeyPairGenerator {
    using
        KeyPairGenerator as kpg
    ensure 
        _has_value(kpg.provider)
        && (
            kpg.provider == "BC"
            || _is_instance(kpg.provider, "org.bouncycastle.jce.provider.BouncyCastleProvider")
        )
    onfail
        InvalidProvider_KeyPairGenerator
}

rule BouncyCastleProvider_KeyStore {
    using
        KeyStore as ks
    ensure 
        _has_value(ks.provider)
        && (
            ks.provider == "BC"
            || _is_instance(ks.provider, "org.bouncycastle.jce.provider.BouncyCastleProvider")
        )
    onfail
        InvalidProvider_KeyStore
}

rule BouncyCastleProvider_Mac {
    using
        Mac as m
    ensure 
        _has_value(m.provider)
        && (
            m.provider == "BC"
            || _is_instance(m.provider, "org.bouncycastle.jce.provider.BouncyCastleProvider")
        )
    onfail
        InvalidProvider_Mac
}

rule BouncyCastleProvider_MessageDigest {
    using
        MessageDigest as md
    ensure 
        _has_value(md.provider)
        && (
            md.provider == "BC"
            || _is_instance(md.provider, "org.bouncycastle.jce.provider.BouncyCastleProvider")
        )
    onfail
        InvalidProvider_MessageDigest
}

rule BouncyCastleProvider_SecretKeyFactory {
    using
        SecretKeyFactory as skf
    ensure 
        _has_value(skf.provider)
        && (
            skf.provider == "BC"
            || _is_instance(skf.provider, "org.bouncycastle.jce.provider.BouncyCastleProvider")
        )
    onfail
        InvalidProvider_SecretKeyFactory
}

rule BouncyCastleProvider_SecureRandom {
    using
        SecureRandom as sr
    ensure 
        _has_value(sr.provider)
        && (
            sr.provider == "BC"
            || _is_instance(sr.provider, "org.bouncycastle.jce.provider.BouncyCastleProvider")
        )
    onfail
        InvalidProvider_SecureRandom
}

rule BouncyCastleProvider_Signature {
    using
        Signature as s
    ensure 
        _has_value(s.provider)
        && (
            s.provider == "BC"
            || _is_instance(s.provider, "org.bouncycastle.jce.provider.BouncyCastleProvider")
        )
    onfail
        InvalidProvider_Signature
}
