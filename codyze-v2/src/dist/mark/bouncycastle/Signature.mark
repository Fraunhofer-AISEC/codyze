package java.jca

entity Signature {
	
	var algorithm;
	var provider;
	
	var privateKey;
	var random;
	
	var certificate;
	var publicKey;
	
	var b;
	var data;
	var off;
	var len;
	
	var outbuf;
	var offset;
	var len;
	
	var signature;
	var offset;
	var length;
	
	op instantiate {
		java.security.Signature.getInstance(
			algorithm : java.lang.String
		);
		java.security.Signature.getInstance(
			algorithm : java.lang.String,
			provider : java.lang.String | java.security.Provider
		);
	}
	
	op initsign {
		java.security.Signature.initSign(
			privateKey : java.security.PrivateKey
		);
		java.security.Signature.initSign(
			privateKey : java.security.PrivateKey,
			random : java.security.SecureRandom
		);
	}
	
	op initverify {
		java.security.Signature.initVerify(
			certificate : java.security.cert.Certificate
		);
		java.security.Signature.initVerify(
			publicKey : java.security.PublicKey
		);
	}
	
	op update {
		java.security.Signature.update(
			b : byte
		);
		java.security.Signature.update(
			data : byte[] | java.nio.ByteBuffer
		);
		java.security.Signature.update(
			data : byte[],
			off : int,
			len : int
		);
	}
	
	op sign {
		signature = java.security.Signature.sign();
		java.security.Signature.sign(
			outbuf : byte[],
			offseet : int,
			len : int
		);
	}
	
	op verify {
		java.security.Signature.verify(
			signature : byte[]
		);
		java.security.Signature.verify(
			signature : byte[],
			offset : int,
			length : int
		);
	}
}
