package java

entity javax.crypto.Cipher {
	
	var transformation;
	var providerString;
	var provider;
	
	var opmode;
	var certificate;
	var random;
	var key;
	var params;
	var paramspecs;
	
	var input;
	var inputOffset;
	var inputLen;
	var output;
	var outputOffset;
	var inputBuffer;
	var outputBuffer;
	var result;
	var resultLen;
	
	var aadSrc;
	var aadOffset;
	var aadLen;
	var aadBuffer;
	
	var wrappedKey;
	var wrappedKeyAlgorithm;
	var wrappedKeyType;
	
	op instantiate {
		this = javax.crypto.Cipher.getInstance(transformation: java.lang.String);
		this = javax.crypto.Cipher.getInstance(transformation: java.lang.String, providerString: java.lang.String);
		this = javax.crypto.Cipher.getInstance(transformation: java.lang.String, provider: java.security.Provider);
	}
	
	op initialize {
		javax.crypto.Cipher.init(opmode: int, certificate);
		javax.crypto.Cipher.init(opmode: int, certificate, random: java.security.SecureRandom);
		javax.crypto.Cipher.init(opmode: int, key: java.security.Key);
		javax.crypto.Cipher.init(opmode: int, key: java.security.Key, params: java.security.AlgorithmParameters);
		javax.crypto.Cipher.init(opmode: int, key: java.security.Key, params: java.security.AlgorithmParameters, random: java.security.SecureRandom);
		javax.crypto.Cipher.init(opmode: int, key: java.security.Key, random: java.security.SecureRandom);
		javax.crypto.Cipher.init(opmode: int, key: java.security.Key, paramspecs: java.security.spec.AlgorithmParameterSpec);
		javax.crypto.Cipher.init(opmode: int, key: java.security.Key, paramspecs: java.security.spec.AlgorithmParameterSpec, random: java.security.SecureRandom);
	}
	
	op update {
		result = javax.crypto.Cipher.update(input: byte[]);
		result= javax.crypto.Cipher.update(input: byte[], inputOffset: int, inputLen: int);
		resultLen = javax.crypto.Cipher.update(input: byte[], inputOffset: int, inputLen: int, output: byte[]);
		resultLen = javax.crypto.Cipher.update(input: byte[], inputOffset: int, inputLen: int, output: byte[], outputOffset: int);
		resultLen = javax.crypto.Cipher.update(inputBuffer: ByteBuffer, outputBuffer: ByteBuffer);
	}
	
	op updateAAD {
		javax.crypto.Cipher.updateAAD(aadSrc: byte[]);
		javax.crypto.Cipher.updateAAD(ssdSrc: byte[], aadOffset: int, aadLen: int);
		javax.crypto.Cipher.updateAAD(aadBuffer: ByteBuffer);
	}
	
	op finalize {
		result = javax.crypto.Cipher.doFinal();
		result = javax.crypto.Cipher.doFinal(input: byte[]);
		resultLen = javax.crypto.Cipher.doFinal(output: byte[], outputOffset: int);
		result = javax.crypto.Cipher.doFinal(input: byte[], inputOffset: int, inputLen: int);
		resultLen = javax.crypto.Cipher.doFinal(input: byte[], inputOffset: int, inputLen: int, output: byte[]);
		resultLen = javax.crypto.Cipher.doFinal(input: byte[], inputOffset: int, inputLen: int, output: byte[], outputOffset: int);
		resultLen = javax.crypto.Cipher.doFinal(inputBuffer: ByteBuffer, outputBuffer: ByteBuffer);
	}
	
	op wrapKey {
		wrappedKey = javax.crypto.Cipher.unwrap(key: java.security.Key);
	}
	
	op unwrapKey {
		key = javax.crypto.Cipher.unwrap(wrappedKey: byte[], wrappedKeyAlgorithm: java.lang.String, wrappedKeyType: int);
	}
	
}


rule Cipher_Order {
	using 
		javax.crypto.Cipher as c
	ensure
		order c.instantiate(), c.initialize(), (c.wrapKey() | c.unwrapKey()) | (c.updateAAD()*, c.update()*, c.finalize())
	onfail Wrong_Cipher_Order
}


rule RandomInitializationVector {
	using
		javax.crypto.Cipher as c, 
		javax.crypto.spec.IvParameterSpec as iv, 
		java.security.SecureRandom as sr
	when
		_split(c.transformation, "/", 1) in [ "CBC", "CTR" ]
	ensure
		_is_instance(c.paramspecs, "javax.crypto.spec.IvParameterSpec") 
			&& _receives_value_from(c.paramspecs, iv) 
			&& _receives_value_from(iv.iv, sr)
	onfail
		UsingNonRandomIV
}

rule MockWhen1 {
	using
		javax.crypto.Cipher as c, 
		javax.crypto.spec.IvParameterSpec as iv, 
		java.security.SecureRandom as sr
	when
		_split(c.transformation, "/", 1) in [ "CBC", "CTR" ]
	ensure
		false
	onfail
		UsingNonRandomIV
}

rule MockWhen2 {
	using
		javax.crypto.Cipher as c, 
		javax.crypto.spec.IvParameterSpec as iv, 
		java.security.SecureRandom as sr
	when
		_split(c.transformation, "/", 1) in [ "CBC", "CTR" ]
	ensure
		true
	onfail
		UsingNonRandomIV
}
