package java

entity java.security.SecureRandom {
	
	var seedBytes;
	var seedLong;
	
	var algorithm;
	var providerString;
	var provider;
	var params;
	
	var newSeed;
	var numBytes;
	
	var randomBytes;
	
	
	op instantiate {
		java.security.SecureRandom();
		java.security.SecureRandom(seedBytes: byte[]);
		
		java.security.SecureRandom.getInstance(algorithm: java.lang.String);
		java.security.SecureRandom.getInstance(algorithm: java.lang.String, providerString: java.lang.String);
		java.security.SecureRandom.getInstance(algorithm: java.lang.String, provider: java.security.Provider);
		java.security.SecureRandom.getInstance(algorithm: java.lang.String, params: java.security.SecureRandomParameters);
		java.security.SecureRandom.getInstance(algorithm: java.lang.String, params: java.security.SecureRandomParameters, providerString: java.lang.String);
		java.security.SecureRandom.getInstance(algorithm: java.lang.String, params: java.security.SecureRandomParameters, provider: java.security.Provider);
		
		java.security.SecureRandom.getInstanceStrong();
	}
	
	op generate {
		newSeed = java.security.SecureRandom.generateSeed(numBytes: int);
	}
	
	op bytes {
		java.security.SecureRandom.nextBytes(randomBytes:  bytes[]);
		java.security.SecureRandom.nextBytes(randomBytes:  bytes[], params: java.security.SecureRandomParameters);
	}
	
	op reseed {
		java.security.SecureRandom.reseed();
		java.security.SecureRandom.reseed(params: java.security.SecureRandomParameters);
		
		java.security.SecureRandom.setSeed(seedBytes: byte[]);
		java.security.SecureRandom.setSeed(seedLong: long);
	}
	
}

rule SecureRandomOrder {
	using 
		java.security.SecureRandom as sr
	ensure
		order sr.instantiate(), sr.generate()
	onfail
		Wrong_Order_For_SecureRandom
}

