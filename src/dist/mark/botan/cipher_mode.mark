package botan

entity Botan.Cipher_Mode {
	
	var algorithm;
	var symkey : Botan.SymmetricKey; 
	var iv : Botan.InitializationVector;
	var iv_length;
	var direction;

	var input;
	var input_length;
	
	var inout;
	
	var aead_data;
	var aead_data_len;

	/* 
		Note: allows creating objects of Type Botan::Keyed_Filter and Botan::Cipher_Mode, therefore all other ops should consider member functions of these two classes 

		Botan::OctetString might be allowed for key and IV, but we will not accept it because Botan::SymmetricKey and Botan::InitializationVector carry more semantics, which should increase safety and maintainability.
		We allow secure vector because real world examples seem to use it
		*/
		
	/* Note: there is also the possibility to create a cipher from ECIES_System_Params. Maybe forbid that? */

	op create_uninit {
		Botan::get_cipher_mode(algorithm, direction, ...);
		Botan::get_cipher(algorithm, direction);
	}
	
	op create_key_init {
		Botan::get_cipher(
			algorithm, 
			iv: Botan::InitializationVector, 
			direction
		);
	}
	
	op create_key_iv_init {
		Botan::get_cipher(
			algorithm, 
			symkey: Botan::SymmetricKey, 
			iv: Botan::InitializationVector, 
			direction
		);
	}

	op set_key {
		Botan::Cipher_Mode::set_key(symkey: Botan::SymmetricKey | Botan::secure_vector<uint8_t>);
		forbidden Botan::Cipher_Mode::set_key(_, _);
		Botan::Keyed_Filter::set_key(symkey: Botan::SymmetricKey | Botan::secure_vector<uint8_t>);
	}
	
	op set_iv {
		Botan::Keyed_Filter::set_iv(iv: Botan::InitializationVector);
	}

	op start_no_iv {
		Botan::Cipher_Mode::start();
		Botan::Keyed_Filter::start_msg();
	}
	
	op start_iv {
		Botan::Cipher_Mode::start(iv);
		Botan::Cipher_Mode::start(iv, iv_length);
		Botan::Cipher_Mode::start_msg(iv, iv_length);
	}

	op process {
		Botan::Cipher_Mode::process(input, input_length);
		Botan::Cipher_Mode::update(inout);
		Botan::Cipher_Mode::update(inout, _);

		Botan::Keyed_Filter::write(input, input_length);
	}

	op finish {
		Botan::Cipher_Mode::finish(inout);
		Botan::Cipher_Mode::finish(inout, _);

		Botan::Keyed_Filter::end_msg();
	}

	op reset {
		Botan::Cipher_Mode::reset();
	}
	
	op assoc_data {
		Botan::AEAD_Filter::set_associated_data(aead_data, aead_data_len);
	}
	
}


rule Cipher_Mode_Order {
	using Botan.Cipher_Mode as cm
	ensure order
		((cm.create_uninit(), cm.set_key()) | cm.create_key_init()), // key is set here
		((cm.set_iv(), cm.start_no_iv()) |  cm.start_iv()),
		cm.assoc_data()*,
		cm.process()*,
		cm.finish()
	onfail Cipher_Mode_Order
}