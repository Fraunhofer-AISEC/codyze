package botan

entity Botan.DL_Group {
	var name;
	op create {
		Botan::DL_Group(name: std::string);
	}
}

// Note: I guess we do not need to model the corresponding decryptor class, as the critical operation is the encryption
entity Botan.DLIES_Encryptor {
	var pubkey: Botan.Private_Key;
	var rng: Botan.RNG; //Note: the RNGs in constructor and encrypt functions can be different instances (which seems to be safe, as long as both are safe RNGs)
	var kdf;
	var cipher_mode;
	var cipher_key_len;
	var mac;
	var mac_key_len;
	var cipher_text;
	var plain_text;
	var plain_text_length;
	
	op create {
		Botan::DLIES_Encryptor(pubkey, rng, kdf, mac);
		Botan::DLIES_Encryptor(pubkey, rng, kdf, mac, mac_key_len);
		
		/* From Botan Handbook:
		 * "The encryption is performed by XORing the message with a stream of bytes provided by the KDF. "
		 */
		forbidden Botan::DLIES_Encryptor(pubkey, rng, kdf, cipher_mode, cipher_key_len, mac);
		forbidden Botan::DLIES_Encryptor(pubkey, rng, kdf, cipher_mode, cipher_key_len, mac, mac_key_len);
	}
	
	op encrypt {
		cipher_text = Botan::DLIES_Encryptor::encrypt(plain_text, rng);
		cipher_text = Botan::DLIES_Encryptor::encrypt(plain_text, plain_text_length, rng);
	}
	
	
	// Those functions don't seem to be safe
	op unsafe {
		forbidden Botan::DLIES_Encryptor::set_initialization_vector(_);
		forbidden Botan::DLIES_Encryptor::set_other_key (_);
	}
}

//Note: we don't need a rule for the order here, as it is obvious and handled by C++/botan
