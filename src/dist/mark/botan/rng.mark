package botan

/*
- There are more RNGs but, only the above are mentioned in Botan's handbook.
- "Generally prefer using either the system RNG, or else AutoSeeded_RNG which is intended to provide best possible behavior in a userspace PRNG."
- We won't define Botan::EntropySource because "The only way you should use an EntropySource is to pass it to a PRNG that will extract entropy from it – never use the output directly for any kind of key or nonce generation!"
- We cannot check for Fork-Safety(The only way you should use an EntropySource is to pass it to a PRNG that will extract entropy from it – never use the output directly for any kind of key or nonce generation!)
*/

entity Botan.RNG {
	var random_data;
	var random_data_len;
	var mac: Botan.MAC;
	
	op create {
		Botan::system_rng();  // no spelling mistake: system_rng() is a static function in Botan Namespace returning a reference to the global System_RNG
		
		Botan::AutoSeeded_RNG();
		/* Allow special constructors?
		Botan::AutoSeeded_RNG(size_t);
		Botan::AutoSeeded_RNG(_, size_t);
		Botan::AutoSeeded_RNG (_, _,_);
		*/
		
		
		Botan::HMAC_DRBG(mac);
		/*Allow special constructors?
		 * Botan::HMAC_DRBG(mac, rng: Botan::RandomNumberGenerator, ...)
		 * Botan::HMAC_DRBG(mac, entropy_sources: Botan::Entropy_sources, ...)
		 * Botan::HMAC_DRBG(mac, rng: Botan::RandomNumberGenerator, entropy_sources: Botan::Entropy_sources, ...)
		 */
		 
		 Botan::ChaCha_RNG();
		 /* Allow special constructors?
		  * Botan::ChaCha_RNG(seed);
		  * Botan::ChaCha_RNG(mac, rng: Botan::RandomNumberGenerator, _)
		  * Botan::ChaCha_RNG(mac, entropy_sources: Botan::Entropy_sources, _)
		  * Botan::ChaCha_RNG(mac, rng: Botan::RandomNumberGenerator, entropy_sources: Botan::Entropy_sources, _)
		  */
		 
		 Botan::RDRAND_RNG();
		 
		 Botan::TPM_RNG(_);
		 
		 Botan::PKCS11::PKCS11_RNG(_);
	}
	
	op get_random {
		// System_RNG
		random_data = Botan::System_RNG::random_vec(size_t);
	 	Botan::System_RNG::randomize(random_data, random_data_len);
	 	random_data = Botan::System_RNG::next_byte();
		random_data = Botan::System_RNG::next_nonzero_byte();
		Botan::System_RNG::randomize_with_input(random_data, random_data_len, input, input_len);
		Botan::System_RNG::randomize_with_ts_input(random_data, random_data_len, input);
		
		// AutoSeeded_RNG
		random_data = Botan::AutoSeeded_RNG::random_vec(size_t);
	 	Botan::AutoSeeded_RNG::randomize(random_data, random_data_len);
	 	random_data = Botan::AutoSeeded_RNG::next_byte();
		random_data = Botan::AutoSeeded_RNG::next_nonzero_byte();
		Botan::AutoSeeded_RNG::randomize_with_input(random_data, random_data_len, input, input_len);
		Botan::AutoSeeded_RNG::randomize_with_ts_input(random_data, random_data_len, input);
		
		// HMAC_DRBG
		random_data = Botan::HMAC_DRBG::random_vec(size_t);
	 	Botan::HMAC_DRBG::randomize(random_data, random_data_len);
	 	random_data = Botan::HMAC_DRBG::next_byte();
		random_data = Botan::HMAC_DRBG::next_nonzero_byte();
		Botan::HMAC_DRBG::randomize_with_input(random_data, random_data_len, input, input_len);
		Botan::HMAC_DRBG::randomize_with_ts_input(random_data, random_data_len, input);
		
		// ChaCha_RNG
		random_data = Botan::ChaCha_RNG::random_vec(size_t);
	 	Botan::ChaCha_RNG::randomize(random_data, random_data_len);
	 	random_data = Botan::ChaCha_RNG::next_byte();
		random_data = Botan::ChaCha_RNG::next_nonzero_byte();
		Botan::ChaCha_RNG::randomize_with_input(random_data, random_data_len, input, input_len);
		Botan::ChaCha_RNG::randomize_with_ts_input(random_data, random_data_len, input);
		
		// RDRAND_RNG
		random_data = Botan::RDRAND_RNG::random_vec(size_t);
	 	Botan::RDRAND_RNG::randomize(random_data, random_data_len);
	 	random_data = Botan::RDRAND_RNG::next_byte();
		random_data = Botan::RDRAND_RNG::next_nonzero_byte();
		Botan::RDRAND_RNG::randomize_with_input(random_data, random_data_len, input, input_len);
		Botan::RDRAND_RNG::randomize_with_ts_input(random_data, random_data_len, input);
		
		// TPM_RNG
		random_data = Botan::TPM_RNG::random_vec(size_t);
	 	Botan::TPM_RNG::randomize(random_data, random_data_len);
	 	random_data = Botan::TPM_RNG::next_byte();
		random_data = Botan::TPM_RNG::next_nonzero_byte();
		Botan::TPM_RNG::randomize_with_input(random_data, random_data_len, input, input_len);
		Botan::TPM_RNG::randomize_with_ts_input(random_data, random_data_len, input);
		
		// PKCS11::PKCS11_RNG
		random_data = Botan::PKCS11::PKCS11_RNG::random_vec(size_t);
	 	Botan::PKCS11::PKCS11_RNG::randomize(random_data, random_data_len);
	 	random_data = Botan::PKCS11::PKCS11_RNG::next_byte();
		random_data = Botan::PKCS11::PKCS11_RNG::next_nonzero_byte();
		Botan::PKCS11::PKCS11_RNG::randomize_with_input(random_data, random_data_len, input, input_len);
		Botan::PKCS11::PKCS11_RNG::randomize_with_ts_input(random_data, random_data_len, input);
	}
	
	// I guess add_entropy() and reseed() are safe to call anytime => so no need to model them for order rules and as long as no other rule needs to reason about their parameters
}


rule RNGOrder {
	using Botan.RNG as r
	ensure
		order r.create(), r.get_random()*
	onfail RNGOrder
}

