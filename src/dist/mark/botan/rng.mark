package botan

/* TODO: make one generic RNG entity that an be any of Botan's safe RNGs */


entity AutoSeeded_RNG {
	var random_data;
	var random_data_len;

	op create {
		Botan::AutoSeeded_RNG();

		/* Allow special constructors?
		Botan::AutoSeeded_RNG(size_t);
		Botan::AutoSeeded_RNG(_, size_t);
		Botan::AutoSeeded_RNG (_, _,_);
		*/
	}

	op reseed {
		// TODO?
	}

	op add_entropy {
		// TODO seems legit in handbook, can be called anytime
	}

	op get_random {
		random_data = Botan::AutoSeeded_RNG::random_vec(size_t);

	 	Botan::AutoSeeded_RNG::randomize(random_data, random_data_len);
	 	random_data = Botan::AutoSeeded_RNG::next_byte();
		random_data = Botan::AutoSeeded_RNG::next_nonzero_byte();

		/* TODO
			Botan::AutoSeeded_RNG::randomize_with_input
			Botan::AutoSeeded_RNG::randomize_with_ts_input
		*/
	}
}

rule RNGOrder {
	using Botan::AutoSeeded_RNG as r
	ensure
		order r.create(), (r.add_entropy()|r.reseed())*, r.get_random()*
	onfail WrongOrderOfRNG
}


/* TODO
entity Botan.System_RNG {
	

	op create{
		Botan::RandomNumberGenerator()  // defaults to System_RNG: https://botan.randombit.net/handbook/api_ref/rng.html#_CPPv410system_rngv
		Botan::SystemRNG()
	}

	op seed {
		Botan::System_RNG::is_seeded()
	}

	op nextbyte {
		nextbyte = Botan::System_RNG::next_byte ()
		next_nonzero_byte Botan::System_RNG::next_nonzero_byte ()
	}
}

/* This rule should be duplicated for every RNG, except AutoSeededRNG
rule CheckIfSeeded {
	// ensure order create, seed?, next_byte*
}
*/

entity HMAC_DRBG {
}

entity ChaCha_RNG {
}

entity RDRAND_RNG {
}

entity TPM_RNG {
}

entity PKCS11_RNG {
}



/*
- There are more RNGs but, only the above are mentioned in Botan's handbook.
- "Generally prefer using either the system RNG, or else AutoSeeded_RNG which is intended to provide best possible behavior in a userspace PRNG."
- We won't define Botan::EntropySource because "The only way you should use an EntropySource is to pass it to a PRNG that will extract entropy from it – never use the output directly for any kind of key or nonce generation!"
- We cannot check for Fork-Safety(The only way you should use an EntropySource is to pass it to a PRNG that will extract entropy from it – never use the output directly for any kind of key or nonce generation!)
*/