package botan

rule _2_01_BlockCiphers {
	using Botan.Cipher_Mode as cm
	ensure
		(_split(cm.algorithm, "/", 0) == "AES")
		|| (_split(_split(cm.algorithm, "/", 0), "-", 0) == "AES")
	onfail _2_01_BlockCiphers
}

rule _2_01_KeyLength {
	using Botan.Cipher_Mode as cm,
		Botan.SymmetricKey as sk
	ensure
		cm.symkey.length in [16, 24, 32]  // 128, 192, 256 bit
	onfail _2_01_KeyLength
}

rule _2_1_01_Modes {
	using Botan.Cipher_Mode as cm
	ensure
		_split(cm.algorithm, "/", 1) in ["CCM", "GCM", "CBC", "CTR"]
	onfail WrongMode
}

// NOTE: rule 2.1.2.1.01 seems to be not checkable. We cannot sufficiently reason about the dynamic behaviour of the program to check this rule.



rule _2_1_2_1_02_CCM_TagSize {
	using Botan.Cipher_Mode as cm
	when _starts_with(_split(cm.algorithm, "/", 1), "CCM")
	ensure _between(_split(cm.algorithm, "/", 1), "(", ")") >= 8 // 8 byte = 64 bit
	onfail  _2_1_2_2_03_GCM_TagSize
}

// NOTE: rule 2.1.2.2.01 seems to be not checkable. We cannot sufficiently reason about the dynamic behaviour of the program to check this rule.


// TODO 2.1.2.2.02



rule _2_1_2_2_03_GCM_TagSize {
	using Botan.Cipher_Mode as cm
	when _starts_with(_split(cm.algorithm, "/", 1), "GCM")
	ensure _between(_split(cm.algorithm, "/", 1), "(", ")") >= 12 // 12 byte = 96 bit
	onfail  _2_1_2_2_03_GCM_TagSize
}




rule _2_1_2_3_01_CBC_RandomIV  {
	using Botan.Cipher_Mode as cm,
		Botan.RNG as rng
	when 
		_split(cm.algorithm, "/", 1) == "CBC" // NOTE: evaluation of enum Botan::Cipher_Dir might make analysis more precise // && cm.direction == Botan::Cipher_Dir::ENCRYPTION
	ensure
		_receives_value_from(cm.iv, rng.random_data)
	onfail NoRandomIV	
}

// Note rule 2.1.2.4.01 seems to be not checkable. We cannot sufficiently reason about the dynamic behaviour of the program to check this rule.


// TODO 2.1.3.01


/* NOTE: rule 2.2: Usage of AES/CTR is covered by checking rules _2_01_BlockCiphers and _2_1_01_Modes.
 * Applying a MAC to the whole stream-enciphered cipher-text seems not sufficiently checkable. We should probably not whitelist this approach.
 */


// Note: rule 3.3.01 seems internally guarenteed by Botan's ECIES_Encryptor




rule _3_3_02_CurveParams {
// This rule also includes 3.3.04, 5.4.3.02, 7.2.2.2.01
	using Botan.ECIES_Encryptor as ee
	ensure ee.ecies_params.ec_group.param in ["brainpool256r1", "brainpool320r1", "brainpool384r1", "brainpool512r1"]
	onfail TR02102_3_3_02_CurveParams
}

rule _3_3_03_ECIES_KDF {
	using Botan.ECIES_Encryptor as ee
	ensure
		ee.ecies_params.kdf_spec == "SP800-56C" ||
		_starts_with(ee.ecies_params.kdf_spec, "HKDF") 
			&& _between(ee.ecies_params.kdf_spec, "(", ")") in ["HMAC(SHA-256)", "HMAC(SHA-512-256)", "HMAC(SHA-384)", "HMAC(SHA-512)", "HMAC(SHA3-256)", "HMAC(SHA3-384)", "HMAC(SHA3-512)"]
		onfail _3_3_03_ECIES_KDF
}


// NOTE: Rule 3.3.04 is included in checking rule _3_3_02_CurveParams


rule _3_4_01_DLIES_KDF {
	using Botan.DLIES_Encryptor as de
	ensure 
		_starts_with(de.kdf.alg, "HKDF") 
		&& _between(de.kdf.alg, "(", ")") in ["HMAC(SHA-256)", "HMAC(SHA-512-256)", "HMAC(SHA-384)", "HMAC(SHA-512)", "HMAC(SHA3-256)", "HMAC(SHA3-384)", "HMAC(SHA3-512)"]
	onfail _3_4_01_DLIES_KDF
}


rule _3_4_02_DLIES_KEYLEN {
	using Botan.DLIES_Encryptor as de
	ensure
		_split(de.privkey.dl_group.name, "/", 2) >= 3000
	onfail _3_4_02_DLIES_KEYLEN
}

rule _3_4_02_DLIES_KEYLEN_2022 {
	using Botan.DLIES_Encryptor as de
	ensure
		_split(de.privkey.dl_group.name, "/", 2) >= 2000
	onfail _3_4_02_DLIES_KEYLEN_2022
}


/* Note rule 3.4.03 is not checked because 'q' seems to be chosen by Botans internal implementation. 
 * There are possible methods to set the 'q' parameter but we recommend not to whitelist them.
 */


// TODO for rule 3.5.01, Botan's EME Scheme must be specified as MARK-Entity


// TODO for rule 3.5.02, Botan's EME Scheme must be specified as MARK-Entity

// Botan provides options for combining hash functions in "Parallel" and "Comp4P". This is not covered here.
rule _4_01_HashFunctions {
	using Botan.HashFunction as hf
	ensure hf.alg in ["SHA-256", "SHA-512-256", "SHA-384", "SHA-512", "SHA3-256", "SHA3-384", "SHA3-512"]
	onfail _01_HashFunctions
}


rule _5_3_01_MAC {
	using Botan.MAC as mac
	ensure _split(mac.algorithm, "\(", 0) in ["CMAC", "OMAC", "HMAC", "GMAC"]  // according to botan handbook: CMAC == OMAC
	onfail _5_3_01_MAC
}

rule _5_3_02_MAC_KEYLEN {
	using Botan.MAC as mac
	ensure mac.key.length >= 16 // 16 Byte = 128 bit
	onfail _5_3_02_MAC_KEYLEN
}

rule _5_3_03_MAC_NONCELEN {
	using Botan.MAC as mac
	ensure mac.nonce_len >= 12 // 12 Byte = 96 bit
	onfail _5_3_03_MAC_NONCELEN
}

rule _5_4_1_01_RSA_SIG_Format {
	using
		Botan.PK_Verifier as v
	when
		_is_instance(v.pub_key, "Botan::RSA_PublicKey")
	ensure
		_split(v.emsa, "(", 0) in ["EMSA4", "ISO_9796_DS2", "ISO_9796_DS3"]
	onfail 
		_5_4_1_01_RSA_SIG_Format
}

rule _5_4_1_02_RSA_SIG_KeyLen {
	using
		Botan.PK_Verifier as v
	when
		_is_instance(v.pub_key, "Botan::RSA_PublicKey")
	ensure
		v.pub_key.rsa_bits >= 3000
	onfail 
		_5_4_1_02_RSA_SIG_KeyLen
}

rule _5_4_1_02_RSA_SIG_KeyLen_2022 {
	using
		Botan.PK_Verifier as v
	when
		_is_instance(v.pub_key, "Botan::RSA_PublicKey")
	ensure
		v.pub_key.rsa_bits >= 2000
	onfail 
		_5_4_1_02_RSA_SIG_KeyLen_2022
}

rule _5_4_2_01_DSA_SIG_KeyLen {
	using
		Botan.PK_Verifier as v
	when
		_is_instance(v.pub_key, "Botan::DSA_PublicKey")
	ensure
		_split(v.pub_key.dl_group.name, "/", 2) >= 3000
	onfail 
		_5_4_2_01_DSA_SIG_KeyLen
}

rule _5_4_2_01_DSA_SIG_KeyLen_2022 {
	using
		Botan.PK_Verifier as v
	when
		_is_instance(v.pub_key, "Botan::DSA_PublicKey")
	ensure
		_split(v.pub_key.dl_group.name, "/", 2) >= 2000
	onfail 
		_5_4_2_01_DSA_SIG_KeyLen_2022
}

rule _5_4_3_01_ECDSA_SIG {
	using 
		Botan.PK_Verifier as v
	when
		!(_most_specific_type(v.pub_key) in ["Botan::RSA_PublicKey", "Botan::DSA_PublicKey"])
	ensure
		_most_specific_type(v.pub_key) in ["Botan::ECDSA_PublicKey", "Botan::ECKCDSA_PublicKey", "Botan::ECGDSA_PublicKey"]
	onfail
		_5_4_3_01_ECDSA_SIG
}


// NOTE: Rule 5.4.3.02 is included in checking rule _3_3_02_CurveParams

// NOTE: rules 6.1.01 - 7.1.1.02 are covered through rules above

// NOTE: rule 7.1.1.03 is not checked because it seems internal to Botan's implementation.

// NOTE rule 7.1.2.01:  concrete requirements unclear

rule _7_2_2_1_01_DH_KEYLEN {
	using Botan.Private_Key as pk
	when _most_specific_type(pk) == "Botan::DH_PrivateKey"
	ensure _split(pk.dl_group.name, "/", 2) >= 3000
	onfail _7_2_2_1_01_DH_KEYLEN
}

rule _7_2_2_1_01_DH_KEYLEN_2022 {
	using Botan.Private_Key as pk
	when _most_specific_type(pk) == "Botan::DH_PrivateKey"
	ensure _split(pk.dl_group.name, "/", 2) >= 2000
	onfail _7_2_2_1_01_DH_KEYLEN_2022
}

// NOTE: rule 7.2.2.2.01 is included in checking rule _3_3_02_CurveParams

// NOTE: rule 9.2 is covered by the definition of Botan.RNG in rng.mark

// NOTE: rule 9.5 is not checked because it is internal to the implementation of Botan

