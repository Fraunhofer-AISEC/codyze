package botan

entity Botan.PK_Verifier {
	var pub_key: Botan.Public_Key;
	var emsa;
	var input;
	var input_length;
	var test_sig;
	var test_sig_length;
	var result;
	
	op create {
		Botan::PK_Verifier(pub_key, emsa, ...); // additional params: Signature_Format format=IEEE_1363, const std::string &provider=""
	}
	
	op update {
		Botan::update(input);
		Botan::update(input, input_length);
	}
	
	op check_after_update {
		result = Botan::check_signature(test_sig, test_sig_length);
		result = Botan::check_signature(test_sig);
	}
	
	op check_whole_msg {
		result = Botan::verify_message(input, input_length, test_sig, test_sig_length);
		result = Botan::verify_message(input, test_sig);
	}
}

rule Order {
	using 
		Botan.PK_Verifier as v
	ensure order
		v.create(),
		(
			(v.update()*, v.check_after_update())*
			| v.check_whole_msg()*
		)
	onfail Order
}

rule _5_5_4_1_02_RSA_SIG_Format {
	using
		Botan.PK_Verifier as v
	when
		_is_instance(v.pub_key, "Botan::RSA_PublicKey")
	ensure
		_split(v.emsa, "(", 0) in ["EMSA4", "ISO_9796_DS2", "ISO_9796_DS3"]
	onfail 
		_5_5_4_1_02_RSA_SIG_Format
}

rule SIG_ALGS {
	using 
		Botan.PK_Verifier as v
	ensure
		_instance_of(v) in ["Botan::RSA_PublicKey", "Botan::ECDSA_PublicKey", "Botan::ECKCDSA_PublicKey", "Botan::ECGDSA_PublicKey"]
	onfail
		SIG_ALGS
}

rule _5_5_4_1_02_RSA_SIG_KeyLen {
	using
		Botan.PK_Verifier as v
	when
		_is_instance(v.pub_key, "Botan::RSA_PublicKey")
	ensure
		v.pub_key.rsa_bits >= 3000
	onfail 
		_5_5_4_1_02_RSA_SIG_KeyLen
}



rule _5_5_4_1_02_RSA_SIG_KeyLen_2022 {
	using
		Botan.PK_Verifier as v
	when
		_is_instance(v.pub_key, "Botan::RSA_PublicKey")
	ensure
		v.pub_key.rsa_bits >= 2000
	onfail 
		_5_5_4_1_02_RSA_SIG_KeyLen_2022
}



