package botan

entity Botan.PK_Verifier {
	var pub_key: Botan.Public_Key;
	var priv_key: Botan.Private_Key;
	var emsa;
	var input;
	var input_length;
	var test_sig;
	var test_sig_length;
	var result;
	
	op create {
		Botan::PK_Verifier(pub_key, emsa);
		Botan::PK_Verifier(pub_key, emsa, ...); // additional params: Signature_Format format=IEEE_1363, const std::string &provider=""
		// Botan::..._PrivateKey is subclass of Botan::..._PublicKey
		Botan::PK_Verifier(priv_key, emsa);
		Botan::PK_Verifier(priv_key, emsa, ...);
	}
	
	op update {
		Botan::update(input);
		Botan::update(input, input_length);
	}
	
	op check_after_update {
		result = Botan::check_signature(test_sig, test_sig_length);
		result = Botan::check_signature(test_sig);
	}
	
	op check_whole_msg {
		result = Botan::verify_message(input, input_length, test_sig, test_sig_length);
		result = Botan::verify_message(input, test_sig);
	}
}

rule SignatureOrder {
	using 
		Botan.PK_Verifier as v
	ensure order
		v.create(),
		(
			(v.update()*, v.check_after_update())*
			| v.check_whole_msg()*
		)
	onfail SignatureOrder
}
