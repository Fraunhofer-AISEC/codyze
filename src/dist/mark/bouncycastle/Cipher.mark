package java.jca

entity Cipher {
    
    var transform;
    var provider;
    
    var opmode;
    var certificate;
    var random;
    var key;
    var params;
    var paramspec;
    
    var input;
    var output;
    
    var wrappedkey;
    var wrappedkeyalgorithm;
    var wrappedkeytype;
    
    
    op instantiate {
        javax.crypto.Cipher.getInstance(transform : java.lang.String);
        javax.crypto.Cipher.getInstance(
            transform : java.lang.String,
            provider : java.lang.String
        );
        javax.crypto.Cipher.getInstance(
            transform : java.lang.String,
            provider : java.security.Provider
        );
    }
    
    op init {
        javax.crypto.Cipher.init(
            opmode : int,
            certificate : java.security.cert.Certificate
        );
        javax.crypto.Cipher.init(
            opmode : int,
            certificate : java.security.cert.Certificate,
            random : java.security.SecureRandom
        );
        javax.crypto.Cipher.init(
            opmode : int,
            key : java.security.Key
        );
        javax.crypto.Cipher.init(
            opmode : int,
            key : java.security.Key,
            params : java.security.AlgorithmParameters
        );
        javax.crypto.Cipher.init(
            opmode : int,
            key : java.security.Key,
            params : java.security.AlgorithmParameters,
            random : java.security.SecureRandom
        );
        javax.crypto.Cipher.init(
            opmode : int,
            key : java.security.Key,
            random : java.security.SecureRandom
        );
        javax.crypto.Cipher.init(
            opmode : int,
            key : java.security.Key,
            paramspec : java.security.spec.AlgorithmParameterSpec
        );
        javax.crypto.Cipher.init(
            opmode : int,
            key : java.security.Key,
            paramspec : java.security.spec.AlgorithmParameterSpec,
            random : java.security.SecureRandom
        );
    }
    
    op aad {
        javax.crypto.Cipher.updateAAD(src : byte[] | java.nio.ByteBuffer);
        javax.crypto.Cipher.updateAAD(src: byte[], ...);
    }
    
    op update {
        output = javax.crypto.Cipher.update(input : byte[]);
        output = javax.crypto.Cipher.update(input : byte[], _, _);
        javax.crypto.Cipher.update(input : byte[], _, _, output : byte[]);
        javax.crypto.Cipher.update(input : byte[], _, _, output : byte[], _);
        javax.crypto.Cipher.update(input : java.nio.ByteBuffer, output : java.nio.ByteBuffer);
    }
    
    op finalize {
        output = javax.crypto.Cipher.doFinal();
        output = javax.crypto.Cipher.doFinal(input : byte[]);
        javax.crypto.Cipher.doFinal(output : byte[], _);
        output = javax.crypto.Cipher.doFinal(input : byte[], _, _);
        javax.crypto.Cipher.doFinal(input : byte[], _, _, output : byte[]);
        javax.crypto.Cipher.doFinal(input : byte[], _, _, output : byte[], _);
        javax.crypto.Cipher.doFinal(input : java.nio.ByteBuffer, output: java.nio.ByteBuffer);
    }
    
    op keywrap {
        wrappedkey = javax.crypto.Cipher.wrap(key : java.security.Key);
        key = javax.crypto.Cipher.unwrap(
            wrappedkey : byte[],
            wrappedkeyalgorithm : java.lang.String,
            wrappedkeytype : int
        );
    }
    
}
