package rules.bsi.tr_02102_1.v2019_01

/**
 * BSI TR-02102-1 (Version 2019-01), 2.1. Blockchiffren
 * - block ciphers
 */
rule ID_2_01 {
    using
        Cipher as c
    ensure
        _split(c.transform, "/", 0) in ["AES"] /* BSI TR-02102-1, ID 2.01 */
        || _split(c.transform, "/", 0) in ["RSA"]
    onfail
        Invalid_TR21021_Cipher
}

/**
 * BSI TR-02102-1 (Version 2019-01), 2.1.1. Betriebsarten
 * - block cipher modes
 */
rule ID_2_1_01 {
    using
        Cipher as c
    when
        _split(c.transform, "/", 0) in ["AES"]
    ensure
        /*  */
        _split(c.transform, "/", 1) in ["CCM", "GCM", "CBC", "CTR"]
    onfail
        InvalidCipherModeforAESBlockCipher
}

/**
 * BSI TR-02102-1 (Version 2019-01), 2.1.2. Betriebsbedingungen
 * - CCM non-repeated IV during key period
 * 
 * Note:
 * - seems to be not checkable. We cannot sufficiently reason about the dynamic behaviour of the program to check this rule.
 */
//rule ID_2_1_2_1_01 {
//    using
//        Cipher as c
//    when
//        _split(c.transform, "/", 0) in ["AES"]
//        && _split(c.transform, "/", 1) in ["CCM"]
//    ensure
//        false
//    onfail
//        InsufficientCCMIVRenewal
//}

/**
 * BSI TR-02102-1 (Version 2019-01), 2.1.2. Betriebsbedingungen
 * - CCM minimum length of authentication tag
 * 
 * Note:
 * Bouncy Castle uses GCMParameterSpec for AEAD cipher initialization.
 */
rule ID_2_1_2_1_02 {
    using
        Cipher as c,
        GCMParameterSpec as gcmspec
    when
        _split(c.transform, "/", 0) in ["AES"]
        && _split(c.transform, "/", 1) in ["CCM"]
    ensure
        _is(c.paramspec,gcmspec)
        && gcmspec.tLen >= 64
    onfail
        InsufficientCCMTagLength
}


/**
 * BSI TR-02102-1 (Version 2019-01), 2.1.2. Betriebsbedingungen
 * - GCM non-repeated IV during key period
 * 
 * Note:
 * - seems to be not checkable. We cannot sufficiently reason about the dynamic behaviour of the program to check this rule.
 */
//rule ID_2_1_2_2_01 {
//    using
//        Cipher as c,
//        GCMParameterSpec as gcm
//    when
//        _split(c.transform, "/", 0) in ["AES"]
//        && _split(c.transform, "/", 1) in ["GCM"]
//    ensure
//        false
//    onfail
//        InvalidGCMIV
//}

/**
 * BSI TR-02102-1 (Version 2019-01), 2.1.2. Betriebsbedingungen
 * - GCM nonce length for authentication tag
 */
rule ID_2_1_2_2_02 {
    using
        Cipher as c,
        GCMParameterSpec as gcm
    when
        _split(c.transform, "/", 0) in ["AES"]
        && _split(c.transform, "/", 1) in ["GCM"]
        && _is(c.paramspec, gcm)
    ensure
        (_has_value(gcm.src) && _length(gcm.src) == 12) /* in bytes */
        || (_has_value(gcm.len) && gcm.len == 12)
    onfail
        InvalidGCMAuthtenticationNonceLength
}

/**
 * BSI TR-02102-1 (Version 2019-01), 2.1.2. Betriebsbedingungen
 * - GCM minimum length of authentication tag
 */
rule ID_2_1_2_2_03 {
    using
        Cipher as c,
        GCMParameterSpec as gcm
    when
        _split(c.transform, "/", 0) in ["AES"]
        && _split(c.transform, "/", 1) in ["GCM"]
        && _is(c.paramspec, gcm)
    ensure
        gcm.tLen >= 96 /* apparently, there are fixed sizes 96, 104, 112, 120 and 128 */
    onfail
        InsufficientGCMTagLength
}


/**
 * BSI TR-02102-1 (Version 2019-01), 2.1.2. Betriebsbedingungen
 * - CBC unpredictable IV
 */
rule ID_2_1_2_3_01 {
    using
        Cipher as c,
        IvParameterSpec as ivspec,
        SecureRandom as sr
    when
        _split(c.transform, "/", 0) in ["AES"]
        && _split(c.transform, "/", 1) in ["CBC"]
    ensure
        // IMPROV not just random IV
        _is(c.paramspec, ivspec)
        && _is(ivspec.iv, sr.randomBytes)
    onfail
        InvalidCBCIV
}

/**
 * BSI TR-02102-1 (Version 2019-01), 2.1.2. Betriebsbedingungen
 * - CTR non-repeated counter during key period
 * 
 * Note:
 * - seems to be not checkable. We cannot sufficiently reason about the dynamic behaviour of the program to check this rule.
 */
//rule ID_2_1_2_4_01 {
//    using
//        Cipher as c
//    when
//        _split(c.transform, "/", 0) in ["AES"]
//        && _split(c.transform, "/", 1) in ["CTR"]
//    ensure
//        false
//    onfail
//        InvalidCTRCounter
//}

/**
 * BSI TR-02102-1 (Version 2019-01), 2.1.3. Paddingverfahren
 * - CBC padding
 */
rule ID_2_1_3_01 {
    using
        Cipher as c
    when
        _split(c.transform, "/", 0) in ["AES"]
        && _split(c.transform, "/", 1) in ["CBC"]
    ensure
        _split(c.transform, "/", 2) in [
            "ISO7816-4Padding", // 1. ISO-Padding, siehe [57], padding method 2 und [73], Appendix A
            "PKCS5Padding", "PKCS7Padding" // 2. Padding gemäß [87], Abschnitt 6.3
        ]
    onfail
        InvalidCBCPadding
}


/**
 * BSI TR-02102-1 (Version 2019-01), 2.2. Stromchiffren
 * - Integrity protection (e.g MAC)
 * 
 * Note:
 * - included in rule ID_2_2_02
 */
//rule ID_2_2_01 {
//    using
//        Cipher as c
//    ensure
//        true
//    onfail
//        InsufficientStreamCipherIntegrityProtection
//}

/**
 * BSI TR-02102-1 (Version 2019-01), 2.2. Stromchiffren
 * - AES/CTR with MAC
 */
rule ID_2_2_02 {
    using
        Cipher as c,
        Mac as m
    when
        _split(c.transform, "/", 0) in ["AES"]
        && _split(c.transform, "/", 1) in ["CTR"]
    ensure
        // IMPROV insufficient application of MAC; MAC over complete stream required
        _is(c.output, m.input)
    onfail
        InsufficientAESCTRIntegrityProtection
}


/**
 * BSI TR-02102-1 (Version 2019-01), 3.3. ECIES-Verschlüsselungsverfahren
 * - ECIES order of decryption operations
 * 
 * Note:
 * - implementation not provided by Bouncy Castle. Implementation by user likely to be error prone and should not be encouraged.
 */
//rule ID_3_3_01 {
//    using
//        Cipher as c
//    when
//        false
//    ensure
//        false
//    onfail
//        InvalidECIESOperationOrder
//}

/**
 * BSI TR-02102-1 (Version 2019-01), 3.3. ECIES-Verschlüsselungsverfahren
 * - ECIES curve parameters
 * 
 * Note:
 * - implementation not provided by Bouncy Castle. Implementation by user likely to be error prone and should not be encouraged.
 */
//rule ID_3_3_02 {
//    using
//        Cipher as c
//    when
//        false
//    ensure
//        false
//    onfail
//        InvalidECIESCurveParameter
//}

/**
 * BSI TR-02102-1 (Version 2019-01), 3.3. ECIES-Verschlüsselungsverfahren
 * - ECIES key derivation
 * 
 * Note:
 * - implementation not provided by Bouncy Castle. Implementation by user likely to be error prone and should not be encouraged.
 */
//rule ID_3_3_03 {
//    using
//        Cipher as c
//    when
//        false
//    ensure
//        false
//    onfail
//        InvalidECIESSymmetricKeyDerivation
//}

/**
 * BSI TR-02102-1 (Version 2019-01), 3.3. ECIES-Verschlüsselungsverfahren
 * - ECIES order of EC base point 
 * 
 * Note:
 * - seems to be not checkable. We cannot sufficiently reason about the supplied order of an EC base point
 */
//rule ID_3_3_04 {
//    using
//        Cipher as c
//    when
//        false
//    ensure
//        false
//    onfail
//        InsufficientECIESBasePointOrder
//}

/**
 * BSI TR-02102-1 (Version 2019-01), 3.4. DLIES-Verschlüsselungsverfahren
 * 
 * Note:
 * - implementation not provided by Bouncy Castle. Implementation by user likely to be error prone and should not be encouraged.
 * - applies to requirements ID 3.4.01, ID 3.4.02 and ID 3.4.03
 */


/**
 * BSI TR-02102-1 (Version 2019-01), 3.5. RSA
 * - RSA EME-OAEP formatting scheme
 */
rule ID_3_5_01 {
    using
        Cipher as c
    when
        _split(c.transform, "/", 0) == "RSA"
        && (
            c.opmode == "javax.crypto.Cipher.ENCRYPT_MODE"
            || c.opmode == "javax.crypto.Cipher.DECRYPT_MODE"
            || c.opmode == "1"
            || c.opmode == "2"
            )
    ensure
        _split(c.transform, "/", 2) in [
                // "OAEPWITHSHA1ANDMGF1PADDING", "OAEPWITHSHA-1ANDMGF1PADDING" // recommended by referenced RFC 8017, but not a recommended hash function by BSI
                // "OAEPWITHSHA224ANDMGF1PADDING", "OAEPWITHSHA-224ANDMGF1PADDING", // recommended by referenced RFC 8017, but not a recommended hash function by BSI
                "OAEPWITHSHA256ANDMGF1PADDING", "OAEPWITHSHA-256ANDMGF1PADDING",
                "OAEPWITHSHA384ANDMGF1PADDING", "OAEPWITHSHA-384ANDMGF1PADDING",
                "OAEPWITHSHA512ANDMGF1PADDING", "OAEPWITHSHA-512ANDMGF1PADDING"//,
                // "OAEPWITHSHA3-256ANDMGF1PADDING", // not listed by referenced RFC 8017, but recommended hash function by BSI
                // "OAEPWITHSHA3-384ANDMGF1PADDING", // not listed by referenced RFC 8017, but recommended hash function by BSI
                // "OAEPWITHSHA3-512ANDMGF1PADDING" // not listed by referenced RFC 8017, but recommended hash function by BSI
            ]
    onfail
        InvalidRSAPadding
}

/**
 * BSI TR-02102-1 (Version 2019-01), 3.5. RSA
 * - RSA minimum length of modulus
 * 
 * Note:
 * - seems to be not checkable. We cannot sufficiently reason about the supplied RSA public key.
 */
//rule ID_3_5_02 {
//    using
//        Cipher as c,
//        RSAPublicKeySpec as pubKey
//    when
//        _split(c.transform, "/", 0) == "RSA"
//        && c.opmode == "javax.crypto.Cipher.ENCRYPT_MODE"
//    ensure
//        false
//    onfail
//        InsufficientRSAKeylength // FIXME valid until 2022
//}

/*
 * Check RSA key length on key generation.
 * 
 * Ensures that generated keys have sufficient length in compliance with BSI TR-02102-1 (Version 2019-01).
 * 
 */
rule ID_3_5_02_RSAKeyGenParameterSpec {
    using
        RSAKeyGenParameterSpec as rsaKeyGenSpec
    ensure
        rsaKeyGenSpec.keysize >= 2000
    onfail
        InsufficientRSAKeylength // FIXME valid until 2022
}

