package jca


entity javax.crypto.Cipher isa Cipher {
	
	var transformation;
	var provider;
	var providerAsString;
	
	
	var direction;
	var key;
	var paramSpec;
	var random;

	op create {
		/*
		 * static Cipher getInstance(String transformation)
		 * static Cipher getInstance(String transformation, Provider provider)
		 * static Cipher getInstance(String transformation, String provider)
		 */
		Cipher.getInstance(transformation: java.lang.String);
		Cipher.getInstance(transformation: java.lang.String, provider: java.security.Provider);
		Cipher.getInstance(transformation: java.lang.String, providerAsString: java.lang.String);
	}
	
	op init {
		/**
		 * void init(int opmode, Certificate certificate)
		 * void init(int opmode, Certificate certificate, SecureRandom random)
		 * void init(int opmode, Key key)
		 * void init(int opmode, Key key, AlgorithmParameters params)
		 * void init(int opmode, Key key, AlgorithmParameterSpec params)
		 * void init(int opmode, Key key, AlgorithmParameterSpec params, SecureRandom random)
		 * void init(int opmode, Key key, AlgorithmParameters params, SecureRandom random)
		 * void init(int opmode, Key key, SecureRandom random)
		 */
		Cipher.init(direction: int, key: java.security.Key);
		Cipher.init(direction: int, key: java.security.Key, paramSpec: java.security.spec.AlgorithmParameterSpec);
		Cipher.init(direction: int, key: java.security.Key, paramSpec: java.security.spec.AlgorithmParameterSpec, random: java.security.SecureRandom);
		Cipher.init(direction: int, key: java.security.Key, random: java.security.SecureRandom);
	}
	
	op process {
		/*
		 * byte[] update(byte[] input)
		 * byte[] update(byte[] input, int inputOffset, int inputLen)
		 * int update(byte[] input, int inputOffset, int inputLen, byte[] output)
		 * int update(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset)
		 * int update(ByteBuffer input, ByteBuffer output)
		 */
		Cipher.update();
	}
	
	op finish {
		/*
		 * byte[] doFinal()
		 * byte[] doFinal(byte[] input)
		 * int doFinal(byte[] output, int outputOffset)
		 * byte[] doFinal(byte[] input, int inputOffset, int inputLen)
		 * int doFinal(byte[] input, int inputOffset, int inputLen, byte[] output)
		 * int doFinal(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset)
		 * int doFinal(ByteBuffer input, ByteBuffer output)
		 */
		Cipher.doFinal(_, _);
	}
	
}

rule BlockCiphers {
	using javax.crypto.Cipher as c
	ensure
		_split(c.transformation, "/", 0) in [ "AES" ]  // TODO Nicetohave: Vordefinierte Methoden highlighten
	onfail WrongBlockCipher
}

rule UseBouncyCastle {
	using javax.crypto.Cipher as c
	ensure 
		c.provider in [ "BC" ]
	onfail NoBouncyCastleProvider
}

