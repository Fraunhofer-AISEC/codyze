package bc

// this represents an interface
entity Digest {

    var input : byte;
    var inArray : byte[];
    var outArray : byte[];

    op update {
        org.bouncycastle.crypto.Digest.update(input);
        org.bouncycastle.crypto.Digest.update(inArray, _, _);
    }

    op finalize {
        org.bouncycastle.crypto.Digest.doFinal(outArray, _);
    }

    op reset {
        org.bouncycastle.crypto.Digest.reset();
    }

}

// rule about represented interface
rule DigestOrder {
    using Digest as d
    ensure
        order d.update()*, d.finalize(), d.reset()?
    onfail DigestOrder
}


// TODO should rule for represented interface apply to derived entities
entity SHA512Digest isa Digest {

    op instantiate {
        org.bouncycastle.crypto.digests.SHA512Digest();
    }

    op finalize {
        org.bouncycastle.crypto.digests.SHA512Digest.doFinal();
    }

    op reset {
        org.bouncycastle.crypto.digests.SHA512Digest.reset();
    }

    op doesnotexist {
        org.bouncycastle.crypto.digests.SHA512Digest.foobar();
    }

}

rule SHA512Digest {
    using SHA512Digest as digest
    ensure
        false
     onfail SHA512Digest
}

rule SHA512DigestOrder {
    using SHA512Digest as digest
    ensure
        order digest.instantiate(), digest.doesnotexist(), digest.finalize(), digest.reset()?
    onfail SHA512DigestOrder
}