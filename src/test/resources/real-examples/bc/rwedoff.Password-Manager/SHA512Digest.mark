package bouncycastle

entity org.bouncycastle.crypto.digests.SHA512Digest isa org.bouncycastle.crypto.Digest {
	
	var instance : org.bouncycastle.crypto.digests.SHA512Digest; // Alternative for `this`
	
	var encodedState : byte[];
	var copy : org.bouncycastle.crypto.digests.SHA512Digest;
	
	var inByte : byte;
	var inByteArray : byte[];
	var inByteArrayOff : int;
	var inByteArraylen : int;
	
	var outArray : byte[];
	var outArrayOff : int;
	var resultLen : int;
	
	
	op instantiate {
        this = org.bouncycastle.crypto.digests.SHA512Digest();
        this = org.bouncycastle.crypto.digests.SHA512Digest(encodedState);
        instance = org.bouncycastle.crypto.digests.SHA512Digest(copy);
    }
	
	op update {
		org.bouncycastle.crypto.digests.SHA512Digest.update(inByte);
		org.bouncycastle.crypto.digests.SHA512Digest.update(inByteArray, inByteArrayOff, inByteArrayLen);
	}
	
	op finish {
		org.bouncycastle.crypto.digests.SHA512Digest.finish();
	}
	
	op finalize {
		resultLen = org.bouncycastle.crypto.digests.SHA512Digest.doFinal(outArray, outArrayOff);
	}
	
	op reset {
		org.bouncycastle.crypto.digests.SHA512Digest.reset();
		org.bouncycastle.crypto.digests.SHA512Digest.reset(_);
	}
	
}

rule SHA512DigestOrder {
	using
		org.bouncycastle.crypto.digests.SHA512Digest as sha512
	ensure
		order sha512.instantiate(), (sha512.update()*, sha512.finish()?, sha512.finalize())*, sha512.reset()?
	onfail Wrong_order
}