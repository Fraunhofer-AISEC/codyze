package botan

entity Botan.AutoSeeded_RNG {
	var random_data; // : secure_vector< uint8_t >  OR std::vector< uint8_t, Alloc > & OR uint8_t[] OR uint8_t
	var random_data_len;

	op create {
		Botan::AutoSeeded_RNG();
		Botan::AutoSeeded_RNG(size_t);
		Botan::AutoSeeded_RNG(_, size_t);
		Botan::AutoSeeded_RNG (_, _, size_t);
	}

	op reseed {

	}

	op get_random {
		random_data = Botan::AutoSeeded_RNG::random_vec(size_t);
		Botan::AutoSeeded_RNG::random_vec(random_data, bytes);
	 	Botan::AutoSeeded_RNG::randomize(random_data, random_data_len);

	 	random_data = Botan::AutoSeeded_RNG::next_byte();
		random_data = Botan::AutoSeeded_RNG::next_nonzero_byte();

		// TODO: Botan::AutoSeeded_RNG::randomize_with_input (uint8_t output[], size_t output_len, const uint8_t input[], size_t input_len) override
	}
}

rule RNGOrder {
	using Botan::AutoSeeded_RNG as r
	ensure
		order r.create(), (r.add_entropy()|r.reseed())*, r.get_random()*
	onfail WrongOrderOfRNG
}


/* TODO
entity Botan.System_RNG {
	

	op create{
		Botan::RandomNumberGenerator()  // defaults to System_RNG: https://botan.randombit.net/handbook/api_ref/rng.html#_CPPv410system_rngv
		Botan::SystemRNG()
	}

	op seed {
		Botan::System_RNG::is_seeded()
	}

	op nextbyte {
		nextbyte = Botan::System_RNG::next_byte ()
		next_nonzero_byte Botan::System_RNG::next_nonzero_byte ()
	}
}

/* This rule should be duplicated for every RNG, except AutoSeededRNG
rule CheckIfSeeded {
	// ensure order create, seed?, next_byte*
}
*/

entity Botan.HMAC_DRBG {
}

entity Botan.ChaCha_RNG {
}

entity Botan.RDRAND_RNG {
}

entity Botan.TPM_RNG {
}

entity Botan.PKCS11_RNG {
}



/*
- There are more RNGs but, only the above are mentioned in Botan's handbook: https://botan.randombit.net/handbook/api_ref/rng.html
- "Generally prefer using either the system RNG, or else AutoSeeded_RNG which is intended to provide best possible behavior in a userspace PRNG."
- We won't define Botan::EntropySource because "The only way you should use an EntropySource is to pass it to a PRNG that will extract entropy from it – never use the output directly for any kind of key or nonce generation!"
- We cannot check for Fork-Safety(The only way you should use an EntropySource is to pass it to a PRNG that will extract entropy from it – never use the output directly for any kind of key or nonce generation!)
*/